////
/// concrete | source/core/_debug.scss
///
/// Debug related functions and mixins. Work in progress!
///
/// @group Core
////

///
/// Adds a warning to the `$_concrete-warnings` list and, if available, outputs
/// the warning with the `@warn` directive.
/// If the 2nd optional parameter is not used, the first parameter should
/// contain the actual warning message.
///
/// @param {string} $function - The function that created the warning.
/// @param {string} $message [''] - The warning text message.
/// @return {null}
///
@function warn($function, $message: '')
{
    $message: _concrete-warn($function, $message);
    @return null;
}

///
/// Adds a warning to the `$_concrete-warnings` list and, if available, outputs
/// the warning with the `@warn` directive.
/// If the 2nd optional parameter is not used, the first parameter should
/// contain the actual warning message.
///
/// @param {string} $function - The function that created the warning.
/// @param {string} $message [''] - The warning text message.
///
@mixin warn($function, $message: '')
{
    $message: _concrete-warn($function, $message);
}

///
/// Displays the warnings added to the `$_concrete-warnings` list.
///
@mixin display-warnings()
{
    $prefix: '@warn';
    @if is-list($_concrete-warnings, 1)
    {

/******************************************************************************/
/* display-warnings(): */

        @each $message in $_concrete-warnings
        {
            /* #{$prefix} #{$message} */
        }

        $_concrete-warnings: () !global;
    }
}

// -----------------------------------------------------------------------------

///
/// Displays all given variables and their types.
///
/// @param {mixed} $var
///
@mixin debug($var...)
{
    @if not is-list($var, 1)
    {
        $var: $_concrete-debugs;
        $_concrete-debugs: () !global;
    }

    $prefix:  '@debug';
    $display: '';

    @if is-scalar($var)
    {
        $display: _concrete-debug-scalar($var);
    }
    @elseif is-list($var)
    {
        $display: _concrete-debug-list($var);
    }
    @elseif is-map($var)
    {
        $display: _concrete-debug-map($var);
    }
    @else
    {
        $display: '{unknown}';
    }

    @if $concrete-console-debugs
    {
        @debug($display);
    }

/* #{$prefix} #{$display} */
}

///
/// Adds the variable `$var` to the list `$_concrete-debugs` and will be
/// displayed by the `display-debug()` mixin.
///
/// @param {mixed} $var
/// @return {null}
///
@function debug($var...)
{
    $_concrete-debugs: append($_concrete-debugs, $var, 'comma') !global;
    @return null;
}

@mixin display-debug()
{
    @if is-list($_concrete-debugs, 1)
    {

/******************************************************************************/
/* display-debug(): */

        @include debug();
    }
}

// -----------------------------------------------------------------------------
// Private functions
// -----------------------------------------------------------------------------

///
/// @access private
/// @group private
///
/// @param {string} $function
/// @param {string} $message
/// @return {string}
///
@function _concrete-warn($function, $message)
{
    $message: if(is-empty($message), $function, $function +': '+ $message);
    $_concrete-warnings: append($_concrete-warnings, $message, 'comma') !global;

    @if $concrete-console-warnings
    {
        @warn($message);
    }

    @return $message;
}

///
/// @access private
/// @group private
///
/// @param {number|string|color|bool|null} $var
/// @return {string}
///
@function _concrete-debug-scalar($var)
{
    $type: type-of($var);
    @if is-number($var)
    {
        $unit: unit($var);
        @if not is-empty($unit)
        {
            $type: $type +'|'+ $unit;
        }
    }

    @return '('+ $type +') `'+ $var +'`';
}

///
/// @access private
/// @group private
///
/// @param {list} $list
/// @param {bool|string} $indentLevel [false]
/// @return {string}
///
@function _concrete-debug-list($list, $inspect: true, $indentLevel: false)
{
    $indent:  '   ';
    $newline: '
';

    $listLength: length($list);
    @if ($listLength > 0)
    {
        @if ($inspect == true)
        {
            $display: '';

            @if ($indentLevel == false)
            {
                $indentLevel: $indent;
            }

            @for $i from 1 through $listLength
            {
                $value: nth($list, $i);
                @if is-scalar($value)
                {
                    $value: _concrete-debug-scalar($value);
                }
                @elseif is-list($value)
                {
                    $value: _concrete-debug-list($value, true,
                                                 $indentLevel + $indent);
                }
                @elseif is-map($value)
                {
                    $value: _concrete-debug-map($value, true,
                                                $indentLevel + $indent);
                }
                @else
                {
                    $value: '{unknown} ['+ type-of($value) +'] '+ $value;
                }

                $value:   '['+ $i +'] => '+ $value;
                $value:   $newline + $indent + $indentLevel + $value;
                $display: $display + unquote($value);
            }

            $tagOpen:  $indentLevel +'(';
            $tagClose: $indentLevel +')';
            $display:  $newline + $tagOpen + $display + $newline + $tagClose;
        }
        @else
        {
            $display: ' (...)';
        }
    }
    @else
    {
        $display: ' ( )';
    }

    @return '('+ type-of($list) +'|'+ $listLength +')'+ $display;
}

///
/// @access private
/// @group private
///
/// @param {map} $map
/// @param {bool|string} $indentLevel [false]
/// @return {string}
///
@function _concrete-debug-map($map, $inspect: true, $indentLevel: false)
{
    $indent:  '   ';
    $newline: '
';

    $mapLength: length($map);
    @if ($mapLength > 0)
    {
        @if ($inspect == true)
        {
            $display: '';

            @if ($indentLevel == false)
            {
                $indentLevel: $indent;
            }

            @each $key, $value in $map
            {
                @if is-scalar($value)
                {
                    $value: _concrete-debug-scalar($value);
                }
                @elseif is-list($value)
                {
                    $value: _concrete-debug-list($value, true,
                                                 $indentLevel + $indent);
                }
                @elseif is-map($value)
                {
                    $value: _concrete-debug-map($value, true,
                                                $indentLevel + $indent);
                }
                @else
                {
                    $value: '{unknown} ['+ type-of($value) +'] '+ $value;
                }

                $value:   '[`'+ $key +'`] => '+ $value;
                $value:   $newline + $indent + $indentLevel + $value;
                $display: $display + unquote($value);
            }

            $tagOpen:  $indentLevel +'{';
            $tagClose: $indentLevel +'}';
            $display:  $newline + $tagOpen + $display + $newline + $tagClose;
        }
        @else
        {
            $display: ' {...}';
        }
    }
    @else
    {
        $display: ' { }';
    }

    @return '(map|'+ $mapLength +')'+ $display;
}
