////
/// concrete | src/core/_storage.scss
///
/// Tests:
/// âœ“ storage-set
/// - storage-get
/// - storage-has
///
/// @group core
////

// -----------------------------------------------------------------------------
// Setter functions and mixins
// -----------------------------------------------------------------------------

@function storage-set($type, $key, $value)
{
    @if map-has-key($_concrete-storage, $type)
    {
        $storage: map-get($_concrete-storage, $type);

        // add or replace the key + value in the storage map
        $storage: map-replace($storage, $key, $value, true);

        // add the map back to the global variable
        $_concrete-storage: map-replace($_concrete-storage,
                                        $type,
                                        $storage) !global;
    }
    @else
    {
        // create a new storage map and merge it with the global variable
        $merge: ($type: ( $key: $value ));
        $_concrete-storage: map-merge($_concrete-storage, $merge) !global;
    }

    @return $value;
}

@mixin storage-set($type, $key, $value)
{
    $set: storage-set($type, $key, $value);
}

// -----------------------------------------------------------------------------
// Getter functions
// -----------------------------------------------------------------------------

@function storage-get($type, $keys...)
{
    $result: null;

    @if map-has-key($_concrete-storage, $type)
    {
        // make sure that arglists are handled correct
        $firstKey: nth-first($keys);
        @if is-list($firstKey)
        {
            $keys: $firstKey;
        }

        $target: map-get($_concrete-storage, $type);

        @each $key in $keys
        {
            @if map-has-key($target, $key)
            {
                $target: map-get($target, $key);
            }
            @else
            {
                // break out of the loop
                @return null;
            }
        }

        $result: $target;
    }

    @return $result;
}

@function storage-has($type, $keys...)
{
    $result: false;

    @if map-has-key($_concrete-storage, $type)
    {
        $result: true;
        $target: map-get($_concrete-storage, $type);

        @each $key in $keys
        {
            @if map-has-key($target, $key)
            {
                $target: map-get($target, $key);
            }
            @else
            {
                // break out of the loop
                @return false;
            }
        }
    }

    @return $result;
}

// -----------------------------------------------------------------------------
// Global variables and settings
// -----------------------------------------------------------------------------
$_concrete-storage: () !global;
