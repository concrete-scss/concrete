////
/// concrete | src/core/_types.scss
///
/// @group core
////

///
/// Returns `true` if $var is a number. If the 2nd parameter $unit is a string,
/// the function will also check if `$var` is of that type of unit.
///
/// @param {mixed} $var
/// @param {bool|string} $unit [false]
/// @return {bool}
///
@function is-number($var, $unit: false)
{
    $result: (type-of($var) == 'number');
    @if ($result and is-string($unit))
    {
        $result: (unit($var) == $unit);
    }
    @return $result;
}

///
/// Returns `true` if `$var` is a string.
///
/// @param {mixed} $var
/// @return {bool}
///
@function is-string($var)
{
    @return (type-of($var) == 'string');
}

///
/// Returns `true` if `$var` is a color.
///
/// @param {mixed} $var
/// @return {bool}
///
@function is-color($var)
{
    @return (type-of($var) == 'color');
}

///
/// Returns `true` if `$var` is a boolean.
///
/// @param {mixed} $var
/// @return {bool}
///
@function is-bool($var)
{
    @return (type-of($var) == 'bool');
}

///
/// Returns `true` if `$var` is equal to null.
///
/// @param {mixed} $var
/// @return {bool}
///
@function is-null($var)
{
    @return (type-of($var) == 'null');
}

///
/// Returns `true` if `$var` is either a number, string, color, boolean or null.
///
/// @param {mixed} $var
/// @return {bool}
///
@function is-scalar($var)
{
    @return is-number($var)
        or is-string($var)
        or is-color($var)
        or is-bool($var)
        or is-null($var);
}

///
/// Returns `true` if `$var` is a list with the minimum length of `$length`.
/// When no length is given or is not a valid number, the length check is
/// skipped.
///
/// @param {mixed} $var
/// @param {bool|number} $length
/// @return {bool}
///
@function is-list($var, $length: false)
{
    $result: (type-of($var) == 'list' or is-arglist($var));
    @if ($result and is-number($length))
    {
        $result: (length($var) >= $length);
    }
    @return $result;
}

///
/// Returns `true` if `$var` is an arglist.
///
/// @param {mixed} $var
/// @return {bool}
///
@function is-arglist($var)
{
    @return (type-of($var) == 'arglist');
}


///
/// Returns `true` if `$var` is a map.
///
/// @param {mixed} $var
/// @return {bool}
///
@function is-map($var)
{
    @return (type-of($var) == 'map');
}

///
/// Returns `true` if `$var` is empty.
///
/// @param {mixed} $var
/// @return {bool}
///
@function is-empty($var)
{
    @return (is-null($var) or
             (is-string($var) and $var == '') or
             (is-list($var) or is-map($var) and length($var) >= 1));
}

// -----------------------------------------------------------------------------
// Unit type related functions
// -----------------------------------------------------------------------------

///
/// Returns `true` if the given number is of unit `em`.
///
/// @param {number} $number
/// @return {bool}
///
@function is-em($number)
{
    @return (is-number($number) and unit($number) == 'em');
}

///
/// Returns `true` if the given number is of unit `rem`.
///
/// @param {number} $number
/// @return {bool}
///
@function is-rem($number)
{
    @return (is-number($number) and unit($number) == 'rem');
}

///
/// Returns `true` if the given number is of unit `%`.
///
/// @param {number} $number
/// @return {bool}
///
@function is-percent($number)
{
    @return (is-number($number) and unit($number) == '%');
}

///
/// Returns `true` if the given number is of unit `px`.
///
/// @param {number} $number
/// @return {bool}
///
@function is-pixel($number)
{
    @return (is-number($number) and unit($number) == 'px');
}

///
/// Returns `true` if the given number is of unit `pt`.
///
/// @param {number} $number
/// @return {bool}
///
@function is-point($number)
{
    @return (is-number($number) and unit($number) == 'pt');
}

///
/// Returns `true` if the given number is of unit `in`.
///
/// @param {number} $number
/// @return {bool}
///
@function is-inch($number)
{
    @return (is-number($number) and unit($number) == 'in');
}

///
/// Returns `true` if the given number is of unit `s`.
///
/// @param {number} $number
/// @return {bool}
///
@function is-second($number)
{
    @return (is-number($number) and unit($number) == 's');
}
