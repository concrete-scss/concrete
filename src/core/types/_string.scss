////
/// concrete | src/core/types/_string.scss
///
/// @group core
////

// -----------------------------------------------------------------------------
// Type check related functions.
// -----------------------------------------------------------------------------

///
/// Returns `true` if `$var` is a string.
///
/// @param {mixed} $var
/// @return {bool}
///
@function is-string($var)
{
    @return (type-of($var) == 'string');
}

///
/// Checks if `$var` is an empty string.
///
/// @param {mixed} $var
/// @return {bool}
///
@function is-empty-string($var)
{
    @return is-string($var) and ($var == '');
}

// -----------------------------------------------------------------------------

// https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($str, $search, $replace)
{

}

@function str-split($str, $seperator: ' ', $limit: 1)
{

}

@function starts-with($string, $substring, $offset: 1)
{
    $result: false;
    $index:  str-index($string, $substring);

    @if not is-null($index)
    {
        $result: ($index >= $offset);
    }

    @return $result;
}

@function ends-with($string, $substring, $offset: null)
{

}

@function trim($str, $chars: ' ')
{

}

@function quote-all($var)
{
    @if is-list($var)
    {
        $list:      ();
        $separator: list-separator($list);

        @each $value in $var
        {
            $value: quote-all($value);
            $list:  append($list, $value, $separator);
        }

        $var: $list;
    }
    @elseif is-string($var)
    {
        $var: quote($var);
    }

    @return $var;
}

///
/// Unquotes all strings inside `$var` if it is a list. Or unquotes `$var` when
/// it is only a string. Otherwise it just returns the given variable.
///
/// @param {list|string} $var
/// @return {list|string}
///
@function unquote-all($var)
{
    @if is-list($var)
    {
        $list:      ();
        $separator: list-separator($list);

        @each $value in $var
        {
            $value: unquote-all($value);
            $list:  append($list, $value, $separator);
        }

        $var: $list;
    }
    @elseif is-string($var)
    {
        $var: unquote($var);
    }

    @return $var;
}

// https://github.com/sass/sass/issues/1395
@function unicode($str)
{
    @return unquote("'") + unquote(str-insert($str, '\\', 1)) + unquote("'");
}

@function newline()
{
    @return '
';
}
