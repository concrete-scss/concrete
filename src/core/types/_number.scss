////
/// concrete | src/core/types/_number.scss
///
/// Tests:
/// ✓ is-number
/// ✓ is-em
/// ✓ is-rem
/// ✓ is-percentage
/// ✓ is-pixel
/// ✓ is-point
/// ✓ is-inch
/// ✓ is-second
///
/// ✓ set-unit
/// ✓ equal-units
///
/// - set-em-base-value
/// - em-base-value
/// ✓ em
/// ✓ rem
///
/// @group core
////

// -----------------------------------------------------------------------------
// Type and unit check related functions.
// -----------------------------------------------------------------------------

///
/// Returns `true` if $var is a number. If the 2nd parameter $unit is a string,
/// the function will also check if `$var` is of that type of unit.
///
/// @param {mixed} $var
/// @param {bool|string} $unit [false]
/// @return {bool}
///
@function is-number($var, $unit: false)
{
    $result: (type-of($var) == 'number');
    @if $result and is-string($unit)
    {
        $result: (unit($var) == $unit);
    }
    @return $result;
}

///
/// Returns `true` if the given number is of unit `em`.
///
/// @param {number} $number
/// @return {bool}
///
@function is-em($number)
{
    @return is-number($number) and (unit($number) == 'em');
}

///
/// Returns `true` if the given number is of unit `rem`.
///
/// @param {number} $number
/// @return {bool}
///
@function is-rem($number)
{
    @return is-number($number) and (unit($number) == 'rem');
}

///
/// Returns `true` if the given number is of unit `%`.
///
/// @param {number} $number
/// @return {bool}
///
@function is-percentage($number)
{
    @return is-number($number) and (unit($number) == '%');
}

///
/// Alias of is-percentage function.
///
@function is-percent($number)
{
    @return is-percentage($number);
}

///
/// Returns `true` if the given number is of unit `px`.
///
/// @param {number} $number
/// @return {bool}
///
@function is-pixel($number)
{
    @return is-number($number) and (unit($number) == 'px');
}

///
/// Alias of is-pixel function.
///
@function is-px($number)
{
    @return is-pixel($number);
}

///
/// Returns `true` if the given number is of unit `pt`.
///
/// @param {number} $number
/// @return {bool}
///
@function is-point($number)
{
    @return is-number($number) and (unit($number) == 'pt');
}

///
/// Alias of is-point function.
///
@function is-pt($number)
{
    @return is-point($number);
}

///
/// Returns `true` if the given number is of unit `in`.
///
/// @param {number} $number
/// @return {bool}
///
@function is-inch($number)
{
    @return is-number($number) and (unit($number) == 'in');
}

///
/// Returns `true` if the given number is of unit `s`.
///
/// @param {number} $number
/// @return {bool}
///
@function is-second($number)
{
    @return is-number($number) and (unit($number) == 's');
}

// -----------------------------------------------------------------------------

@function set-unit($var, $unit, $default: 0)
{
    @if (not is-number($var) or
         unit($var) != $unit)
    {
        @if is-null($default)
        {
            $default: 0;
        }

        $var: $default;
    }

    @return $var;
}

// @function to-unit($var, $unit)
// {
//     @if (unit($var) != $unit)
//     {
//         @if ($unit == 'em')
//         {
//             $var: ($var * 1em);
//         }
//         @elseif ($unit == 'rem')
//         {
//             $var: ($var * 1rem);
//         }
//         @elseif ($unit == '%') or ($unit == 'percent')
//         {
//             $var: ($var * 1%);
//         }
//         @elseif ($unit == 'px') or ($unit == 'pixel')
//         {
//             $var: ($var * 1px);
//         }
//         @elseif ($unit == 'pt') or ($unit == 'point')
//         {
//             $var: ($var * 1pt);
//         }
//         @elseif ($unit == 'in') or ($unit == 'inch')
//         {
//             $var: ($var * 1in);
//         }
//         @elseif ($unit == 's') or ($unit == 'second')
//         {
//             $var: ($var * 1s);
//         }
//     }

//     @return $var;
// }

///
/// Checks if the given numbers are of the same unit.
///
/// @param {mixed} $var1 - A variable to check.
/// @param {mixed} $var2 - A second variable to check.
/// @return {boolean}
///
@function equal-units($var1, $var2)
{
    @return (is-number($var1) and
             is-number($var2) and
             unit($var1) == unit($var2));
}

// -----------------------------------------------------------------------------
// Em and rem related functions/mixins
// -----------------------------------------------------------------------------

@mixin set-em-base-value($newBaseValue)
{
    $functionsNeedVarsToReturnValuesTo: em-base-value($newBaseValue);
}

@function em-base-value($newBaseValue)
{
    @if is-string($newBaseValue)
    {
        $newBaseValue: get-font-size($newBaseValue);
    }

    $_concrete-em-base-value: $newBaseValue !global;

    @return $newBaseValue;
}

///
/// Calculates the relative em value compared to the given base font-size.
/// Example taken from http://vvv.tobiassjosten.net/css/px-to-em-with-sass/
///
/// @param {number} $from - The value to calculate the em value from.
/// @param {number|string} $base [default] - The font-size to compare the
///         $from value with.
/// @return {number}
///
@function em($from, $base: null)
{
    @if is-null($base)
    {
        $base: $_concrete-em-base-value;
    }
    @if is-string($base)
    {
        $base: get-font-size($base);
    }

    @return if(equal-units($from, $base), (($from / $base) * 1em), $from);
}

///
/// Calculates the relative rem value. The rem units are always relative to the
/// font-size in the body html element.
///
/// @param {number} $from - The pixel value to calculate the rem value from.
/// @param {number} $baseFallback - Fallback base pixel value when the default
///         font-size cannot be retrieved.
/// @return {number}
///
@function rem($from, $baseFallback: 16px)
{
    $base: get-font-size();
    $base: set-unit($base, 'px', $baseFallback);

    @return if(is-pixel($from), (($from / $base) * 1rem), $from);
}


// -----------------------------------------------------------------------------
// Global variables and settings
// -----------------------------------------------------------------------------
@if not global-variable-exists('_concrete-em-base-value')
{
    $_concrete-em-base-value: 'default' !global;
}
