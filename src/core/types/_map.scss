////
/// concrete | src/core/types/_map.scss
///
/// Some extra map related functions.
///
/// Tests:
/// ✓ is-map
/// - map-replace
/// ✓ map-append
/// ✓ map-get-key
/// - map-sort
/// ✓ map-ksort
///
/// @group core
////

// -----------------------------------------------------------------------------
// Type check related functions.
// -----------------------------------------------------------------------------

///
/// Returns `true` if `$var` is a map with the minimum length of `$length`.
/// When no length is given or is not a valid number, the length check is
/// skipped.
///
/// @param {mixed} $var
/// @param {bool|number} $length
/// @return {bool}
///
@function is-map($var, $length: false)
{
    $result: (type-of($var) == 'map');
    @if $result and is-number($length)
    {
        $result: (length($var) >= $length);
    }

    @return $result;
}

// -----------------------------------------------------------------------------

///
/// Replace an existing entry in a map with a new value.
///
/// @param {map} $map The map holding the key and value pairs.
/// @param {string} $key The key in the map to replace the value from
/// @param {mixed} $value The value to replace the entry in the map with.
/// @param {string} $seperator [comma]
/// @return {map} Returns a new map with the added value.
///
@function map-replace($map, $key, $value, $seperator: 'comma')
{
    @if map-has-key($map, $key)
    {
        $map: map-remove($map, $key);
        $map: map-merge($map, ($key: $value));
    }

    @return $map;
}

///
/// Append a value to an entry in a map.
///
/// @param {map} $map The map holding the key and value pairs.
/// @param {string} $key The key in the map to append the value to.
/// @param {mixed} $value The value to append to the entry in the map.
/// @param {string} $seperator [comma]
/// @return {map} Returns a new map with the added value.
///
@function map-append($map, $key, $value, $seperator: 'comma')
{
    @if map-has-key($map, $key)
    {
        // append the extra value to the already existing value
        $value: append(map-get($map, $key), $value, $seperator);
        // remove the existing key
        $map: map-remove($map, $key);
    }

    // merge the key and value to the map
    $map: map-merge($map, ($key: $value));
    @return $map;
}

///
/// Finds and returns the key of first occurance of `$value` in `$map`.
///
/// @param {map} $map
/// @param {mixed} $value
/// @return {mixed}
///
@function map-get-key($map, $value)
{
    $index: index(map-values($map), $value);
    @return if(not is-null($index), nth(map-keys($map), $index), null);
}

///
/// Sort map according to values.
///
/// @param {map} $map
/// @param {string} $type [regular]
/// @param {bool} $reverse [false]
/// @return {map}
///
/// @todo Make sorting of maps with multiple equal values possible.
///
@function map-sort($map, $type: 'regular', $reverse: false)
{
    $result:     ();
    $keysList:   map-keys($map);
    $valuesList: map-values($map);
    $values:     list-sort($valuesList, $type, $reverse);

    @each $value in $values
    {
        $index:  index($valuesList, $value);
        $key:    nth($keysList, $index);
        $result: map-merge($result, ($key: $value));
    }

    @return $result;
}

///
/// Sort map according to keys.
///
/// @param {map} $map
/// @param {string} $type [regular]
/// @param {bool} $reverse [false]
/// @return {map}
///
@function map-ksort($map, $type: 'regular', $reverse: false)
{
    $result: ();
    $keys:   list-sort(map-keys($map), $type, $reverse);

    @each $key in $keys
    {
        $value:  map-get($map, $key);
        $result: map-merge($result, ($key: $value));
    }

    @return $result;
}
