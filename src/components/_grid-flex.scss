////
/// concrete | source/components/_grid-flex.scss
///
/// @group grid
////

///
/// @access private
/// @group private
///
/// @param {map} $grid
///
@mixin _concrete-flexgrid-create($grid)
{
    &.grid-row,
    .grid-row
    {
        @extend %concrete-flexgrid-row;
    }

    [data-col]
    {
        @extend %concrete-flexgrid-column;
    }

    // add the default column widths
    $defaultColumnWidths: map-get($grid, 'default');
    @each $name, $width in $defaultColumnWidths
    {
        [data-col^="#{$name}"]
        {
            width: $width;
        }
    }

    // the columns widths per breakpoint
    @each $breakpoint in $_concrete-breakpoints
    {
        @if map-has-key($grid, $breakpoint)
        {
            @include breakpoint($breakpoint, 'max')
            {
                $columnWidths: map-get($grid, $breakpoint);
                @each $width, $names in $columnWidths
                {
                    $selectors: ();
                    @each $name in $names
                    {
                        // when the column width for this breakpoint is
                        // different from the default column width, add the
                        // default column (without breakpoint prefix) selector
                        // to the list of selectors for the new width.
                        // by doing this, the grid will automatically respond
                        // to the breakpoint, thus making the grid responsive
                        @if ($width != map-get($defaultColumnWidths, $name))
                        {
                            $defaultColumnWidths: map-merge($defaultColumnWidths, ($name: $width));
                            $selectors: _grid-selector($selectors, $name);
                        }

                        $selectors: _grid-selector($selectors, $name, $breakpoint);
                    }

                    #{$selectors}
                    {
                        width: $width;
                    }
                }
            }
        }
    }
}

// -----------------------------------------------------------------------------
// flexgrid placeholders
// -----------------------------------------------------------------------------
%concrete-flexgrid-row
{
    display: flex;
    flex-wrap: wrap;

    &.grid-stretch
    {
        align-items: stretch;
    }
}

ul%concrete-flexgrid-row
{
    @include reset-list;
}

%concrete-flexgrid-column
{
    flex: 1 1 auto;

    %concrete-flexgrid-row.grid-stretch &
    {
        display: flex;
    }
}
