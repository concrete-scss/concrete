////
/// concrete | src/components/_gradients.scss
///
/// Some easy to use and pretty cool gradients!
///
/// @group gradients
////

// @include gradient(red) -> gradient-horizontal(red, transparent);
// @include gradient(red, blue) -> gradient-horizontal(red, blue);
// @include gradient('horizontal', red) -> gradient-horizontal(red, transparent);

@mixin gradient($type, $from: null, $to: null)
{
    @if is-string($type)
    {
        @if is-color($from)
        {
            $params: _gradients-parse-params($from, $to);
            @include _gradient-from-type($type, $params)
        }
        @else
        {
            @include _gradient-from-storage($type);
        }
    }
    @elseif is-color($type) or is-list($type)
    {
        @include gradient-horizontal($type, $from);
    }
    @else
    {
        @include warn('Cannot create gradient');
    }
}

@mixin gradient-horizontal($from, $to: null)
{
    $params: _gradients-parse-params($from, $to);
    @include _gradient-horizontal($params);
}

@mixin gradient-vertical($from, $to: null)
{
    $params: _gradients-parse-params($from, $to);
    @include _gradient-vertical($params);
}

@mixin gradient-radial($from, $to: null)
{
    $params: _gradients-parse-params($from, $to);
    @include _gradient-radial($params);
}

// -----------------------------------------------------------------------------
// Setter functions and mixins
// -----------------------------------------------------------------------------

@mixin set-gradient($name, $type, $from, $to: null)
{
    $params: _gradients-parse-params($from, $to);

    $gradient:
    (
        'type': $type,
        'from': map-get($params, 'from'),
        'to':   map-get($params, 'to')
    );

    @include storage-set('gradients', $name, $gradient);
}

// -----------------------------------------------------------------------------
// Getter functions
// -----------------------------------------------------------------------------

@function get-gradient($name...)
{
    @return storage-get('gradients', $name);
}

@function get-gradient-color($name, $color, $alpha: null)
{
    $result: storage-get('gradients', $name, $color, 'color');

    @if not is-null($result) and not is-null($alpha)
    {
        $result: rgba($result, $alpha);
    }

    @return $result;
}

// -----------------------------------------------------------------------------
// Private functions and mixins
// -----------------------------------------------------------------------------

@function _gradient-flatten-param($params, $key)
{
    $result: map-get($params, $key);
    $result: map-values($result);
    $result: change-separator($result, 'space');

    @return $result;
}

@mixin _gradient-horizontal($params)
{
    @include _gradient-linear(left, to right, 1, $params);
}

@mixin _gradient-vertical($params)
{
    @include _gradient-linear(top, to bottom, 0, $params);
}

///
/// *Original mixin taken from Bootstrap
///
/// @access private
///
/// @param {string} $direction1 - Direction of the gradient (old spec).
/// @param {string} $direction2 - Direction of the gradient (current spec).
/// @param {number} $ieGradientType - IE <=9 GradientType value.
/// @param {map} $params - Map with starting and ending colors and positions.
///
@mixin _gradient-linear($direction1, $direction2, $ieGradientType, $params)
{
    // flatten the maps to the color and position are in a normal list
    $from: _gradient-flatten-param($params, 'from');
    $to:   _gradient-flatten-param($params, 'to');

    // Chrome10+, Safari5.1+
    background: -webkit-linear-gradient($direction1, $from, $to);

    // Opera 12
    background: -o-linear-gradient($direction1, $from, $to);

    // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
    background: linear-gradient($direction2, $from, $to);
    background-repeat: repeat-x;

    // IE9 and down
    $from: ie-hex-str(nth($from, 1));
    $to:   ie-hex-str(nth($to, 1));

    filter: progid:DXImageTransform.Microsoft.gradient(
               startColorstr='#{$from}',
               endColorstr='#{$to}',
               GradientType=#{$ieGradientType} );
}

///
/// Creates a radial gradient. See gradient-horizontal for further details.
///
/// @param {map} $params - Map with starting and ending colors and positions.
///
@mixin _gradient-radial($params)
{
    // flatten the maps to the color and position are in a normal list
    $from: _gradient-flatten-param($params, 'from');
    $to:   _gradient-flatten-param($params, 'to');

    // Chrome10+, Safari5.1+
    background: -webkit-radial-gradient(center, ellipse cover, $from, $to);

    // Opera 12
    background: -o-radial-gradient(center, ellipse cover, $from, $to);

    // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
    background: radial-gradient(ellipse at center, $from, $to);
}

// -----------------------------------------------------------------------------
// Private functions related to parsing the given parameters
// -----------------------------------------------------------------------------
@function _gradients-parse-position($value)
{
    $result: false;

    @if is-number($value)
    {
        @if is-percentage($value)
        {
            $result: $value;
        }
        @elseif unitless($value)
        {
            $multiplier: if(($value <= 1), 100%, 1%);
            $result:     ($value * $multiplier);
        }
    }

    @return $result;
}

@function _gradients-parse-param($param)
{
    $color:    false;
    $position: false;

    @if is-list($param, 2)
    {
        $nth1: nth($param, 1);
        $nth2: nth($param, 2);

        @if is-color($nth1)
        {
            $color:    $nth1;
            $position: _gradients-parse-position($nth2);
        }
        @elseif is-number($nth1)
        {
            $position: _gradients-parse-position($nth1);

            @if is-color($nth2)
            {
                $color: $nth2;
            }
        }
    }
    @elseif is-color($param)
    {
        $color: $param;
    }
    @else
    {
        $position: _gradients-parse-position($param);
    }

    @return ( 'color': $color, 'position': $position );
}

@function _gradients-parse-params($from, $to)
{
    $from: _gradients-parse-param($from);
    $to:   _gradients-parse-param($to);

    $fromColor:    map-get($from, 'color');
    $fromPosition: map-get($from, 'position');
    $toColor:      map-get($to, 'color');
    $toPosition:   map-get($to, 'position');

    @if is-false($toColor)
    {
        $alpha:   alpha($fromColor);
        $toColor: if(($alpha >= 0.5), rgba($fromColor, 0), rgba($fromColor, 1));
    }

    $noFromPosition: is-false($fromPosition);
    $noToPosition:   is-false($toPosition);

    // default gradients go from 0% to 100%
    @if ($noFromPosition and $noToPosition)
    {
        $fromPosition: 0%;
        $toPosition:   100%;
    }
    @elseif $noFromPosition
    {
        // when the to position is at 0%, the from position is the opposite;
        // 100%
        $fromPosition: if(($toPosition == 0%), 100%, 0%);
    }
    @elseif $noToPosition
    {
        // when the from position is at 100%, the to position is the opposite;
        // 0%
        $toPosition: if(($fromPosition == 100%), 0%, 100%);
    }

    $resultFrom: ( 'color': $fromColor, 'position': $fromPosition );
    $resultTo:   ( 'color': $toColor, 'position': $toPosition );

    @return ( 'from': $resultFrom, 'to': $resultTo );
}

@mixin _gradient-from-type($type, $params)
{
    @if ($type == 'horizontal')
    {
        @include _gradient-horizontal($params);
    }
    @elseif ($type == 'vertical')
    {
        @include _gradient-vertical($params);
    }
    @elseif ($type == 'radial')
    {
        @include _gradient-radial($params);
    }
    @else
    {
        @include warn('Unknown gradient type ' + $type);
    }
}

@mixin _gradient-from-storage($name)
{
    $gradient: get-gradient($name);

    @if not is-null($gradient)
    {
        @include _gradient-from-type(map-get($gradient, 'type'), $gradient);
    }
}
