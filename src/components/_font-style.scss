////
/// concrete | src/components/_font-style.scss
///
/// @group font-style
////

///
/// Displays all properties from the given font-style.
///
@mixin font-style($name, $properties: 'all')
{
    $fontStyle: get-font-style($name);

    @if not is-null($fontStyle)
    {
        @each $property, $value in $fontStyle
        {
            $func: 'get-' + $property;
            @if function-exists($func)
            {
                $value: call($func, $name);
            }

            #{$property}: $value;
        }
    }
}

// -----------------------------------------------------------------------------
// Setter functions and mixins
// -----------------------------------------------------------------------------

@function set-font-style($name, $options)
{
    @return storage-set('font-style', $name, $options);
}

@function extend-font-style($name, $extendFrom, $options: null)
{
    $extendFrom: get-font-style($extendFrom);
    @if not is-null($extendFrom)
    {
        $options: if(not is-null($options),
                     map-merge($extendFrom, $options),
                     $extendFrom);
    }

    @return set-font-style($name, $options);
}

@mixin set-font-style($name, $options)
{
    $x:set-font-style($name, $options);
}

@mixin extend-font-style($name, $extendFrom, $options: null)
{
    $x:extend-font-style($name, $extendFrom, $options);
}

// -----------------------------------------------------------------------------
// Getter functions
// -----------------------------------------------------------------------------

///
/// Returns a font-style list from the `$concrete-font-styles` setting.
///
/// @param {string} $name [default] The name of the font-style.
/// @return {map}
///
@function get-font-style($name: 'default')
{
    @return storage-get('font-style', $name);
}

///
/// Returns a font-style property from a font-style in the
/// `$concrete-font-styles` setting.
///
/// @param {string} $name - The name of the font-style.
/// @param {string} $property - The name of the property of the font-style.
/// @param {boolean|null} $quote [null] - Quote or unquote the returned value?
///
/// @return {mixed}
///
@function get-font-style-property($name, $property, $quote: null)
{
    $result: storage-get('font-style', $name, $property);

    @if is-true($quote)
    {
        $result: quote-all($result);
    }
    @elseif is-false($quote)
    {
        $result: unquote-all($result);
    }

    @return $result;
}

///
/// Returns the font-family property from a font-style in the
/// `$concrete-font-styles` setting.
///
/// @param {string} $name [default] - The name of the font-style.
/// @return {string}
///
@function get-font-family($name: 'default')
{
    $result: get-font-style-property($name, 'font-family');
    @if is-list($result)
    {
        $result: change-separator($result, 'comma');
    }

    @return $result;
}

///
/// Returns the font-size property from a font-style in the
/// `$concrete-font-styles` setting.
///
/// @param {string} $name [default] - The name of the font-style.
/// @return {string}
///
@function get-font-size($name: 'default')
{
    @return get-font-style-property($name, 'font-size', false);
}

///
/// Returns the font-weight property from a font-style in the
/// `$concrete-font-styles` setting.
///
/// @param {string} $name [default] - The name of the font-style.
/// @return {string}
///
@function get-font-weight($name: 'default')
{
    @return get-font-style-property($name, 'font-weight', false);
}

///
/// Returns the line-height property from a font-style in the
/// `$concrete-font-styles` setting.
///
/// @param {string} $name [default] - The name of the font-style.
/// @return {string}
///
@function get-line-height($name: 'default')
{
    @return get-font-style-property($name, 'line-height', false);
}

// -----------------------------------------------------------------------------
// Global variables and settings
// -----------------------------------------------------------------------------
@if not global-variable-exists('concrete-font-styles')
{
    $concrete-font-styles: () !global;
}
