////
/// concrete | src/components/_breakpoints.scss
///
/// Breakpoint related functions and mixins.
///
/// @group media-query
////

///
/// @param {number|string|map|list} $breakpoint
/// @param {string} $type - Valid values are `min`, `max` or `both`.
/// @param {bool|number} $scrollbarBuffer [true]
///
@mixin breakpoint($breakpoint, $type: 'both', $scrollbarBuffer: true)
{
    $mediaQuery:     ();
    $mediaQueryList: media-query-list($breakpoint);

    @each $item in $mediaQueryList
    {
        $mediaQuery: media-query-create($mediaQuery,
                                        $item,
                                        $type,
                                        $scrollbarBuffer);
    }

    @if is-list($mediaQuery, 1)
    {
        // show debug info about the current breakpoint
        @if $concrete-debug-breakpoints
        {
            @include debug($breakpoint, $type);
        }

        // update current active breakpoint
        $previousBreakpoint: $_concrete-in-breakpoint;
        $_concrete-in-breakpoint: $breakpoint !global;

        @media #{$mediaQuery}
        {
            @content;
        }

        // update active breakpoint to previous value
        $_concrete-in-breakpoint: $previousBreakpoint !global;
    }
}

///
/// The current breakpoint used with the breakpoint() mixin.
///
/// @return {string|null}
///
@function current-breakpoint()
{
    @return $_concrete-in-breakpoint;
}

// -----------------------------------------------------------------------------
// Setter functions and mixins
// -----------------------------------------------------------------------------

@mixin set-breakpoint($breakpoint, $width, $properties: null, $overwrite: false)
{
    @if is-null($properties) or not is-list($properties)
    {
        $properties: $_concrete-breakpoint-properties;
    }

    $data: _breakpoint-create-data($width, $properties);

    $_concrete-breakpoints: map-append($_concrete-breakpoints,
                                       $breakpoint,
                                       $data) !global;
}

@mixin set-breakpoint-properties($breakpoint, $properties)
{
    $data: ();

    @if map-has-key($_concrete-breakpoints, $breakpoint)
    {
    // replace the existing properties map with the new one
        $data: map-get($_concrete-breakpoints, $breakpoint);
        $data: map-replace($data, 'properties', $properties);
    }
    @else
    {
        $data: _breakpoint-create-data(null, $properties);
    }

    $_concrete-breakpoints: map-replace($_concrete-breakpoints,
                                        $breakpoint,
                                        $data) !global;
}

@mixin set-breakpoint-property($breakpoint, $property, $value: null, $overwrite: false)
{
    @if is-null($value)
    {
        $value:    $property;
        $property: $breakpoint;

        $_concrete-breakpoint-properties: map-append($_concrete-breakpoint-properties,
                                                     $property,
                                                     $value) !global;

        @each $breakpoint in $_concrete-breakpoints
        {
            @include set-breakpoint-property($breakpoint, $property, $value);
        }
    }
    @else
    {
        // get-breakpoint-properties()
    }
}

// -----------------------------------------------------------------------------
// Getter functions
// -----------------------------------------------------------------------------

///
/// When `$value` is either `min` or `max`, the min/max value is returned from
/// the breakpoint map inside `$concrete-breakpoints` with key `$breakpoint`.
/// If `$value` has any other value, the whole map (with min and max keys) will
/// be returned. If the breakpoint map cannot be found, a warning will be
/// stored in `$concrete-warnings`.
///
/// @param {string} $breakpoint [default] - The breakpoint to return.
/// @param {bool|string} $value [false] - The value of the breakpoint to return.
///         This can be either `min`, `max`, `false` or `both`.
/// @return {map|number}
///
@function get-breakpoint($breakpoint: null, $value: false)
{
    @if is-null($breakpoint)
    {
        $breakpoint: nth-first($_concrete-breakpoints);
    }

    $result: null;
    $data:   _breakpoint-get('get-breakpoint', $breakpoint);

    @if is-map($data)
    {
        @if ($value == false) or ($value == 'both')
        {
            $result: $data;
        }
        @elseif map-has-key($data, $value)
        {
            $result: map-get($data, $value);
        }
        @else
        {
            $result: warn('get-breakpoint',
                          'Unknown value `#{$value}` in `#{$breakpoint}`!');
        }
    }

    @return $result;
}

@function get-breakpoint-properties($breakpoint: null)
{
    @return _breakpoint-get-value('get-breakpoint-properties', $breakpoint, 'properties');

    // $result: null;
    // @if is-null($breakpoint) or ($breakpoint == 'default')
    // {
    //     $result: $_concrete-breakpoint-properties;
    // }
    // @else
    // {
    //     $result: _breakpoint-get('get-breakpoint-properties', $breakpoint);
    // }

    // @return $result;
}

@function get-breakpoint-property($breakpoint, $property)
{
    @return _breakpoint-get-property('get-breakpoint-property',
                                     $breakpoint,
                                     $property);
}

// -----------------------------------------------------------------------------

///
/// Maakt een breakpoint data map aan.
///
@function _breakpoint-create-data($widths, $properties)
{
    $minWidth: $widths;
    $maxWidth: null;

    @if is-list($widths)
    {
        $minWidth: nth($widths, 1);
        $maxWidth: nth($widths, 2);
    }

    @return
    (
        'minWidth':   $minWidth,
        'maxWidth':   $maxWidth,
        'properties': $properties
    );
}

///
/// Geeft een eerder aangemaakte breakpoint data map terug.
///
@function _breakpoint-get($function, $breakpoint)
{
    $result: null;

    @if map-has-key($_concrete-breakpoints, $breakpoint)
    {
        $result: map-get($_concrete-breakpoints, $breakpoint);
    }
    @else
    {
        $result: warn($function, 'Unknown breakpoint `#{$breakpoint}`!');
    }

    @return $result;
}

///
/// Geeft een property van een aangemaakte breakpoint data map terug.
///
@function _breakpoint-get-property($function, $breakpoint, $property)
{
    $result: null;
    $data:   _breakpoint-get($function, $breakpoint);

    @if is-map($data) and map-has-key($data, 'properties')
    {
        $properties: map-get($data, 'properties');
        @if map-has-key($properties, $property)
        {
            $result: map-get($properties, $property);
        }
    }
    @else
    {
        $result: warn($function,
                      'Missing properties for breakpoint `#{$breakpoint}`!');
    }

    @return $result;
}

// -----------------------------------------------------------------------------
// Global variables and settings
// -----------------------------------------------------------------------------
@if not global-variable-exists('concrete-debug-breakpoints')
{
    $concrete-debug-breakpoints: false !global;
}

$_concrete-breakpoints:           () !global;
$_concrete-breakpoint-properties: () !global;
$_concrete-in-breakpoint:         null !global;


// deprecated
@if not global-variable-exists('concrete-breakpoint-scrollbar-buffer')
{
    $concrete-breakpoint-scrollbar-buffer: () !global;
}

// $_concrete-breakpoints:   _concrete-init-breakpoints() !global;

// settings that are prepared so they are more easily to use by the framework
// $concrete-breakpoints: _concrete-parse-breakpoints();

// $concrete-breakpoint-scrollbar-buffer:
    // _concrete-init-breakpoint-settings($concrete-breakpoint-scrollbar-buffer, 0);
