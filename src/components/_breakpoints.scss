////
/// concrete | src/components/_breakpoints.scss
///
/// Breakpoint related functions and mixins.
///
/// @group media-query
////

///
/// @param {number|string|map|list} $breakpoint
/// @param {string} $type - Valid values are `min`, `max` or `both`.
/// @param {bool|number} $scrollbarBuffer [true]
///
@mixin breakpoint($breakpoint, $type: 'both', $scrollbarBuffer: true)
{
    $mediaQuery:     ();
    $mediaQueryList: media-query-list($breakpoint);

    @each $item in $mediaQueryList
    {
        $mediaQuery: media-query-create($mediaQuery,
                                        $item,
                                        $type,
                                        $scrollbarBuffer);
    }

    @if is-list($mediaQuery, 1)
    {
        // show debug info about the current breakpoint
        @if $concrete-debug-breakpoints
        {
            @include debug($breakpoint, $type);
        }

        // update current active breakpoint
        $previousBreakpoint: $_concrete-in-breakpoint;
        $_concrete-in-breakpoint: $breakpoint !global;

        @media #{$mediaQuery}
        {
            @content;
        }

        // update active breakpoint to previous value
        $_concrete-in-breakpoint: $previousBreakpoint !global;
    }
}

///
/// The current breakpoint used with the breakpoint() mixin.
///
/// @return {string|null}
///
@function current-breakpoint()
{
    @return $_concrete-in-breakpoint;
}

// -----------------------------------------------------------------------------
// Setter functions and mixins
// -----------------------------------------------------------------------------

@mixin set-breakpoint($breakpoint, $size, $properties: null)
{
    $_concrete-breakpoints: map-append($_concrete-breakpoints, $breakpoint,
    (
        min:        0,
        max:        $size,
        properties: $properties
    )) !global;
}

@mixin set-breakpoint-default-property($breakpoint, $property, $value)
{
    $_concrete-breakpoints: _concrete-add($concrete-breakpoints, $breakpoint,
    (
        properties: ( $property: $value )
    )) !global;
}

// -----------------------------------------------------------------------------
// Getter functions
// -----------------------------------------------------------------------------

///
/// When `$value` is either `min` or `max`, the min/max value is returned from
/// the breakpoint map inside `$concrete-breakpoints` with key `$breakpoint`.
/// If `$value` has any other value, the whole map (with min and max keys) will
/// be returned. If the breakpoint map cannot be found, a warning will be
/// stored in `$concrete-warnings`.
///
/// @param {string} $breakpoint [default] - The breakpoint to return.
/// @param {bool|string} $value [false] - The value of the breakpoint to return.
///         This can be either `min`, `max`, `false` or `both`.
/// @return {map|number}
///
@function get-breakpoint($breakpoint: null, $value: false)
{
    @if is-null($breakpoint)
    {
        $breakpoint: nth-first($_concrete-breakpoints);
    }

    @if map-has-key($concrete-breakpoints, $breakpoint)
    {
        $breakpoint: map-get($concrete-breakpoints, $breakpoint);

        @if ($value == false or $value == 'both')
        {
            @return $breakpoint;
        }
        @elseif map-has-key($breakpoint, $value)
        {
            @return map-get($breakpoint, $value);
        }
        @else
        {
            @return warn('get-breakpoint',
                'Unknown value `#{$value}` in `#{$breakpoint}`!');
        }
    }
    @else
    {
        @return warn('get-breakpoint',
            'Unknown breakpoint `#{$breakpoint}`!');
    }
}

// -----------------------------------------------------------------------------
// Global variables and settings
// -----------------------------------------------------------------------------
@if not global-variable-exists('concrete-debug-breakpoints')
{
    $concrete-debug-breakpoints: false !global;
}

@if not global-variable-exists('concrete-breakpoints')
{
    $concrete-breakpoints: () !global;
}

// deprecated
@if not global-variable-exists('concrete-breakpoint-scrollbar-buffer')
{
    $concrete-breakpoint-scrollbar-buffer: () !global;
}

$_concrete-breakpoints:   _concrete-init-breakpoints() !global;
$_concrete-in-breakpoint: null !global;

// settings that are prepared so they are more easily to use by the framework
$concrete-breakpoints: _concrete-parse-breakpoints();

// $concrete-breakpoint-scrollbar-buffer:
    // _concrete-init-breakpoint-settings($concrete-breakpoint-scrollbar-buffer, 0);
