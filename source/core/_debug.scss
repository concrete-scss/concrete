////
/// frame-scss | core/_debug.scss
/// file version: 0.00.006
///
/// Debug related functions and mixins. Work in progress!
///
/// @group Core
////

//
// Adds a warning to the $frame-warnings list and, if available, outputs the
// warning with the @warn directive.
// If the 2nd optional parameter is not used, the first parameter should contain
// the actual warning message.
//
// @param {string} $function - The function that created the warning.
//
// @param {string} $message [false] - The warning text message.
//
// @return {null}
//
@function warn($function, $message: false)
{
    $message: if($message == false, $function, $function +': '+ $message);
    $frame-warnings: append($frame-warnings, $message, 'comma');

    @warn $message;
    @return null;
}

//
// Displays the warnings added to the $frame-warnings list.
//
@mixin frame-display-warnings()
{
    $prefix: '@warn';
    @if is-list($frame-warnings, 1)
    {
        @each $message in $frame-warnings
        {
            /* #{$prefix} #{$message} */
        }

        $frame-warnings: ();
    }
}

//------------------------------------------------------------------------------

///
/// Displays all given variables and their types.
///
/// @param {mixed} $var
///
@mixin debug($var...)
{
    @if not is-list($var, 1)
    {
        $var: $frame-debugs;
        $frame-debugs: ();
    }

    $prefix:  '@debug';
    $display: '';

    @if is-scalar($var)
    {
        $display: _frame-debug-scalar($var);
    }
    @elseif is-list($var)
    {
        $display: _frame-debug-list($var);
    }
    @elseif is-map($var)
    {
        $display: _frame-debug-map($var);
    }
    @else
    {
        $display: '{unknown}';
    }

/* #{$prefix} #{$display} */
}

///
/// Adds the variable $var to the list $frame-debugs and will be displayed by
/// the frame-display-debug() mixin.
///
/// @param {mixed} $var
/// @return {null}
///
@function debug($var...)
{
    $frame-debugs: append($frame-debugs, $var, 'comma');
    @return null;
}

//------------------------------------------------------------------------------

///
/// @access private
/// @param {number|string|color|bool|null} $var
/// @return {string}
///
@function _frame-debug-scalar($var)
{
    $type: type-of($var);
    @if is-number($var)
    {
        $unit: unit($var);
        @if ($unit != '')
        {
            $type: $type +'|'+ $unit;
        }
    }

    @return '('+ $type +') `'+ $var +'`';
}

///
/// @access private
/// @param {list} $list
/// @param {bool|string} $indentLevel [false]
/// @return {string}
///
@function _frame-debug-list($list, $inspect: true, $indentLevel: false)
{
    $indent:  '   ';
    $newline: '
';

    $listLength: length($list);
    @if($listLength > 0)
    {
        @if ($inspect == true)
        {
            $display: '';

            @if ($indentLevel == false)
            {
                $indentLevel: $indent;
            }

            @for $i from 1 through $listLength
            {
                $value: nth($list, $i);
                @if is-scalar($value)
                {
                    $value: _frame-debug-scalar($value);
                }
                @elseif is-list($value)
                {
                    $value: _frame-debug-list($value, true, $indentLevel + $indent);
                }
                @elseif is-map($value)
                {
                    $value: _frame-debug-map($value, true, $indentLevel + $indent);
                }
                @else
                {
                    $value: '{unknown} ['+ type-of($value) +'] '+ $value;
                }

                $value:   '['+ $i +'] => '+ $value;
                $value:   $newline + $indent + $indentLevel + $value;
                $display: $display + unquote($value);
            }

            $tagOpen:  $indentLevel +'(';
            $tagClose: $indentLevel +')';
            $display:  $newline + $tagOpen + $display + $newline + $tagClose;
        }
        @else
        {
            $display: ' (...)';
        }
    }
    @else
    {
        $display: ' ( )';
    }

    @return '(list|'+ $listLength +')'+ $display;
}

///
/// @access private
/// @param {map} $map
/// @param {bool|string} $indentLevel [false]
/// @return {string}
///
@function _frame-debug-map($map, $inspect: true, $indentLevel: false)
{
    $indent:  '   ';
    $newline: '
';

    $mapLength: length($map);
    @if($mapLength > 0)
    {
        @if ($inspect == true)
        {
            $display: '';

            @if ($indentLevel == false)
            {
                $indentLevel: $indent;
            }

            @each $key, $value in $map
            {
                @if is-scalar($value)
                {
                    $value: _frame-debug-scalar($value);
                }
                @elseif is-list($value)
                {
                    $value: _frame-debug-list($value, true, $indentLevel + $indent);
                }
                @elseif is-map($value)
                {
                    $value: _frame-debug-map($value, true, $indentLevel + $indent);
                }
                @else
                {
                    $value: '{unknown} ['+ type-of($value) +'] '+ $value;
                }

                $value:   '[`'+ $key +'`] => '+ $value;
                $value:   $newline + $indent + $indentLevel + $value;
                $display: $display + unquote($value);
            }

            $tagOpen:  $indentLevel +'{';
            $tagClose: $indentLevel +'}';
            $display:  $newline + $tagOpen + $display + $newline + $tagClose;
        }
        @else
        {
            $display: ' {...}';
        }
    }
    @else
    {
        $display: ' { }';
    }

    @return '(map|'+ $mapLength +')'+ $display;
}
