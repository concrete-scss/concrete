//
// frame-scss | core/_debug.scss
// file version: 0.00.003
////////////////////////////////////////////////////////////////////////////////
//
// Debug related functions and mixins. Work in progress!
//

//------------------------------------------------------------------------------
// Adds a warning to the $frame-warnings list and, if available, outputs the
// warning with the @warn directive.
// If the 2nd optional parameter is not used, the first parameter should contain
// the actual warning message.
//
// @param string $function The function that created the warning.
// @param string $message The warning text message.
// @return null
//
@function warn($function, $message: false)
{
    $message: if($message == false, $function, $function +': '+ $message);
    $frame-warnings: append($frame-warnings, $message, comma);

    @warn $message;
    @return null;
}

//------------------------------------------------------------------------------
// Displays the warnings added to the $frame-warnings list.
//
@mixin frame-display-warnings()
{
    $prefix: '@warn';
    @if is-list($frame-warnings, 1)
    {
        @each $message in $frame-warnings
        {
            /* #{$prefix} #{$message} */
        }

        $frame-warnings: ();
    }
}

////////////////////////////////////////////////////////////////////////////////

// displays all given variables
@mixin debug($var: null)
{
    $prefix:  '@debug';
    $display: '';

    @if is-scalar($var)
    {
        $display: _frame-debug-scalar($var);
    }
    @elseif is-list($var)
    {
        $display: _frame-debug-list($var);
    }
    @elseif is-map($var)
    {
        $display: _frame-debug-map($var);
    }
    @else
    {
        $display: '{unknown}'
    }

/* #{$prefix} #{$display} */
}

@function debug($var)
{
    $frame-debugs: append($frame-debugs, $var, comma);
    @return null;
}

@mixin frame-display-debug()
{
    @include debug($frame-debugs);
    $frame-debugs: ();
}

////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------
// Private functions
//------------------------------------------------------------------------------

// numbers (e.g. 1.2, 13, 10px, .2s);
// strings of text, with and without quotes (e.g. "foo", 'bar', baz);
// colors (e.g. blue, #04a3f9, rgba(255, 0, 0, 0.5));
// booleans (e.g. true, false);
// nulls (e.g. null);
@function _frame-debug-scalar($var)
{
    $type: type-of($var);
    @if is-number($var)
    {
        $unit: unit($var);
        @if ($unit != '')
        {
            $type: $type +'|'+ $unit;
        }
    }

    @return '('+ $type +') `'+ $var +'`';
}

// lists of values, separated by spaces or commas (e.g. 1.5em 1em 0 2em or
// Helvetica, Arial, sans-serif);
@function _frame-debug-list($list, $indentLevel: false)
{
    $indent:  '   ';
    $newline: '
';

    $listLength: length($list);
    @if($listLength > 0)
    {
        $display: '';

        @if ($indentLevel == false)
        {
            $indentLevel: $indent;
        }

        @for $i from 1 through $listLength
        {
            $value: nth($list, $i);
            @if is-scalar($value)
            {
                $value: _frame-debug-scalar($value);
            }
            @elseif is-list($value)
            {
                $value: _frame-debug-list($value, $indentLevel + $indent);
            }
            @elseif is-map($value)
            {
                $value: _frame-debug-map($value, $indentLevel + $indent);
            }

            $value:   '['+ $i +'] => '+ $value;
            $value:   $newline + $indent + $indentLevel + $value;
            $display: $display + unquote($value);
        }

        $tagOpen:  $indentLevel +'(';
        $tagClose: $indentLevel +')';
        $display:  $newline + $tagOpen + $display + $newline + $tagClose;
    }
    @else
    {
        $display: ' ( )';
    }

    @return '(list|'+ $listLength +')'+ $display;
}

// maps from one value to another (e.g. (key1: value1, key2: value2)).
@function _frame-debug-map($map, $indentLevel: false)
{
    $indent:  '   ';
    $newline: '
';

    $mapLength: length($map);
    @if($mapLength > 0)
    {
        $display: '';

        @if ($indentLevel == false)
        {
            $indentLevel: $indent;
        }

        @each $key, $value in $map
        {
            @if is-scalar($value)
            {
                $value: _frame-debug-scalar($value);
            }
            @elseif is-list($value)
            {
                $value: _frame-debug-list($value, $indentLevel + $indent);
            }
            @elseif is-map($value)
            {
                $value: _frame-debug-map($value, $indentLevel + $indent);
            }

            $value:   '[`'+ $key +'`] => '+ $value;
            $value:   $newline + $indent + $indentLevel + $value;
            $display: $display + unquote($value);
        }

        $tagOpen:  $indentLevel +'{';
        $tagClose: $indentLevel +'}';
        $display:  $newline + $tagOpen + $display + $newline + $tagClose;
    }
    @else
    {
        $display: ' { }';
    }

    @return '(map|'+ $mapLength +')'+ $display;
}
