//
// frame-scss | core/_core.scss
// file version: 1.01.002
////////////////////////////////////////////////////////////////////////////////
//
// All default frame-scss functions are within this file. Through these
// functions you can easily use the variables you have set in your main
// _frame.scss file.
//
// SassScript supports seven main data types:
// - numbers (e.g. 1.2, 13, 10px, .2s);
// - strings of text, with and without quotes (e.g. "foo", 'bar', baz);
// - colors (e.g. blue, #04a3f9, rgba(255, 0, 0, 0.5));
// - booleans (e.g. true, false);
// - nulls (e.g. null);
// - lists of values, separated by spaces or commas (e.g. 1.5em 1em 0 2em or
//   Helvetica, Arial, sans-serif);
// - maps from one value to another (e.g. (key1: value1, key2: value2)).
//

//------------------------------------------------------------------------------
// Returns a font-family value from the $frame-fonts setting.
//
// @param string $key The value of the corresponding key to return.
// @return string|list
//
@function frame-font($key: 'default')
{
    @if map-has-key($frame-fonts, $key)
    {
        $return: map-get($frame-fonts, $key);
        @return unquote($return);
    }

    @return warn('frame-font', 'Unknown font `#{$key}`!');
}

//------------------------------------------------------------------------------
// Returns a font-size value from the $frame-fontSizes setting.
//
// @param string $key The value of the corresponding key to return.
// @return number(px)
//
@function frame-font-size($key: 'default')
{
    @if map-has-key($frame-font-sizes, $key)
    {
        @return map-get($frame-font-sizes, $key);
    }

    @return warn('frame-font-size', 'Unknown font-size `#{$key}`!');
}

//------------------------------------------------------------------------------
// Returns a color value from the $frame-colors setting. You can pass keys to
// this functions with or withour quotes, eg. frame-color(grey) or
// frame-color('grey') as the key will be quoted to make sure the key can be
// selected from the $frame-colors map.
//
// @param string $key The value of the corresponding key to return.
// @return color
//
@function frame-color($key: 'default')
{
    $key: quote($key);
    @if map-has-key($frame-colors, $key)
    {
        @return map-get($frame-colors, $key);
    }

    @return warn('frame-color', 'Unknown color `#{$key}`!');
}

//------------------------------------------------------------------------------
//
// @param string $name
// @param string $attr
// @return map|number(s)|string
//
@function frame-transition($name: 'default', $attr: false)
{
    @if map-has-key($frame-transitions, $name)
    {
        $transition: map-get($frame-transitions, $name);

        @if ($attr == false)
        {
            @return $transition;
        }
        @elseif map-has-key($transition, $attr)
        {
            @return map-get($transition, $attr);
        }
        @else
        {
            @return warn('frame-transition',
                'Unknown attribute `#{$attr}` for transition `#{$name}`!');
        }
    }

    @return warn('frame-transition', 'Unknown transition set `#{$name}`!');
}

//------------------------------------------------------------------------------
// When the $size parameter is a valid key within the breakpoint of $type in
// the $frame-breakpoints settings map, the value of this key is returns as a
// number. When $size equals false (the default case) the complete map with the
// min/max keys is returned.
// Of course, when $type equals default, the default number value is return.
//
// @param string $breakpoint The breakpoint to return.
// @param string $value The min/max value of the breakpoint to return.
// @return map|number(px)
//
@function frame-breakpoint($breakpoint: 'default', $value: false)
{
    $isDefault: ($breakpoint == 'default');

    @if $isDefault
    {
        $breakpoint: 'xl';
    }

    @if map-has-key($frame-breakpoints, $breakpoint)
    {
        $breakpoint: map-get($frame-breakpoints, $breakpoint);

        @if ($value == false or $value == 'both')
        {
            @return $breakpoint;
        }
        @elseif map-has-key($breakpoint, $value)
        {
            @return map-get($breakpoint, $value);
        }
        @else
        {
            @return warn('frame-breakpoint',
                         'Unknown value `#{$value}` in `#{$breakpoint}`!');
        }
    }
    @else
    {
        @return warn('frame-breakpoint',
                     'Unknown breakpoint `#{$breakpoint}`!');
    }
}

@function frame-wrapper-width()
{
    $breakpoint: frame-breakpoint();
    $key:        if(map-has-key($breakpoint, 'max'), 'max', 'min');

    @return map-get($breakpoint, $key);
}

@function frame-breakpoint-scrollbar-buffer($type: 'default')
{

}

@function frame-grid-width($breakpoint: 'default', $gridType: false)
{
    @if ($breakpoint == 'default')
    {
        @return map-get($frame-grid-width, $breakpoint);
    }
    @elseif map-has-key($frame-breakpoints, $breakpoint)
    {
        @if map-has-key($frame-grid-width, $breakpoint) != true
        {
            $breakpoint: 'default';
        }

        @return map-get($frame-grid-width, $breakpoint);
    }
    @else
    {
        @return warn('frame-grid-width',
                     'Unknown breakpoint `#{$breakpoint}`!');
    }
}

@function frame-grid-gap($breakpoint: 'default')
{

}

////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------
// Private functions
//------------------------------------------------------------------------------

@function _frame-prepare-breakpoints()
{
    $map: ();
    $min: false;
    $max: false;

    @each $breakpoint, $value in $frame-breakpoints
    {
        @if is-map($value)
        {
            $min: map-get($value, 'min');
        }
        @else
        {
            $min:   $value;
            $value: ('min': $min, 'max': $max);
        }

        $map: map-append($map, $breakpoint, $value);
        $max: ($min - 1);
    }

    @return $map;
}
