////
/// concrete | source/core/_utils.scss
///
/// @group Core
////

@function equal-types($var1, $var2)
{
    @return (type-of($var1) == type-of($var2));
}

@function equal-units($var1, $var2)
{
    @return (is-number($var1) and
             is-number($var2) and
             unit($var1) == unit($var2));
}

///
/// Checks if a variable is the correct type. If not, the variable will be
/// overwritten and set to a default value for that type.
///
/// @param {mixed} $var - The variable to check.
///
/// @param {string|list} $type - The type $var should be.
///
/// @param {mixed} $default [null]
///        The default value to return if type-of($var) != $type.
///
/// @return {mixed}
///
@function set-type($var, $type, $default: null)
{
    // type alias
    @if ($type == 'boolean')
    {
        $type: 'bool';
    }

    $varType:         type-of($var);
    $isIncorrectType: ($varType != $type);

    // special check for arglists wich are basically lists
    @if ($isIncorrectType and
         $type == 'list' and
         is-list($var))
    {
        $isIncorrectType: false;
    }

    @if $isIncorrectType
    {
        @if is-null($default)
        {
            @if ($type == 'number')
            {
                $default: 0;
            }
            @elseif ($type == 'list')
            {
                $default: ();
            }
        }

        $var: $default;
    }

    @return $var;
}

@function set-unit($var, $unit, $default: 0)
{
    @if (not is-number($var) or
         unit($var) != $unit)
    {
        @if is-null($default)
        {
            $default: 0;
        }

        $var: $default;
    }

    @return $var;
}

///
/// Unquotes all strings inside `$var` if it is a list. Or unquotes `$var` when
/// it is only a string. Otherwise it just returns the given variable.
///
/// @param {list|string} $var
/// @return {list|string}
///
@function unquote-all($var)
{
    @if is-list($var)
    {
        $list:      ();
        $separator: list-separator($list);

        @each $value in $var
        {
            $value: unquote-all($value);
            $list:  append($list, $value, $separator);
        }

        $var: $list;
    }
    @elseif is-string($var)
    {
        $var: unquote($var);
    }

    @return $var;
}

//------------------------------------------------------------------------------

///
/// Calculates the relative em value compared to the given base font-size.
/// Example taken from http://vvv.tobiassjosten.net/css/px-to-em-with-sass/
///
/// @param {number} $from - The value to calculate the em value from.
///
/// @param {number|string} $base [default]
///        The font-size to compare the $from value with.
///
/// @return {number}
///
@function em($from, $base: 'default')
{
    @if is-string($base)
    {
        $base: get-font-size($base);
    }

    @return if(equal-units($from, $base),
               (($from / $base) * 1em),
               $from);
}

///
/// Calculates the relative rem value. The rem units are always relative to the
/// font-size in the body html element.
///
/// @param {number} $from - The pixel value to calculate the rem value from.
/// @return {number}
///
@function rem($from)
{
    $base: get-font-size();
    $base: set-unit($base, 'px', 16px);

    @return if(unit($from) == 'px',
               (($from / $base) * 1rem),
               $from);
}
