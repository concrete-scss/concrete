////
/// frame-scss | source/components/_grid.scss
/// file version: 0.01.000
////

@function frame-grid-columns($gridSettings...)
{
    $result:            ();
    $resultDefault:     ();
    $frameBreakpointsL: length($_frame-breakpoints);

    @each $colSettings in $gridSettings
    {
        $column: nth($colSettings, 1);
        $width:  nth($colSettings, 2);

        $resultDefault: map-append($resultDefault, $column, $width);

        @if (length($colSettings) >= 3)
        {
            $breakpointWidths: nth($colSettings, 3);
            @for $i from 2 through $frameBreakpointsL
            {
                $breakpoint: nth($_frame-breakpoints, $i);
                @if map-has-key($breakpointWidths, $breakpoint)
                {
                    $width: map-get($breakpointWidths, $breakpoint);
                }

                $result: _frame-grid-column($result,
                                            $column,
                                            $breakpoint,
                                            $width);
            }
        }
        // no custom breakpoint widths, so all widths are equal on
        // all breakpoints
        @else
        {
            @for $i from 2 through $frameBreakpointsL
            {
                $result: _frame-grid-column($result,
                                            $column,
                                            nth($_frame-breakpoints, $i),
                                            $width);
            }
        }
    }

    $result: map-merge(('default': $resultDefault), $result);
    @return $result;
}

///
/// @param {string} $type
///        Available grid types are `block`, `flex` and `table`.
///
/// @param {string|map} $columns [default]
///        A map with grid columns. When `default`, the grid columns in
///        $frame-grid-columns is used.
///
/// @todo The flex and table grids are still work in progress.
///
@mixin frame-grid-create($type, $columns: 'default')
{
    @if ($columns == 'default')
    {
        $columns: $frame-grid-columns;
    }

    @if ($type == 'block')
    {
        @include  _frame-display-blockgrid($columns);
    }
    /*@elseif ($type == 'flex')
    {
        $columns: _frame-prepare-flexgrid($columns);
        @include  _frame-display-flexgrid($columns);
    }*/
    /*@elseif ($type == 'table')
    {
        $columns: _frame-prepare-tablegrid($columns);
        @include  _frame-display-tablegrid($columns);
    }*/
    @else
    {
        @return warn('frame-grid',
            'Unable to create grid, unknown type `#{$type}`!');
    }
}

//------------------------------------------------------------------------------
// Private functions
//------------------------------------------------------------------------------

///
/// @access private
/// @group private
///
/// @param {map} $result
/// @param {string} $column - Column name
/// @param {string} $breakpoint
/// @param {number} $width - Column width
/// @return {map}
///
@function _frame-grid-column($result, $column, $breakpoint, $width)
{
    $breakpointWidths: ();
    @if map-has-key($result, $breakpoint)
    {
        $breakpointWidths: map-get($result, $breakpoint);
    }

    $breakpointWidths: map-append($breakpointWidths, $width, $column);
    $result: map-merge($result, ($breakpoint: $breakpointWidths));

    @return $result;
}

///
/// @access private
/// @group private
///
/// @param {list} $selectors
/// @param {string} $name
/// @param {bool|string} $breakpoint [false]
/// @return {list}
///
@function _frame-grid-selector($selectors, $name, $breakpoint: false)
{
    @if ($breakpoint != false)
    {
        $name: $breakpoint +'-'+ $name;
    }

    $selector:  '[data-col*="#{$name}"]';
    $selector:  unquote($selector);
    $selectors: append($selectors, $selector, 'comma');
    @return $selectors;
}

///
/// @access private
/// @group private
///
/// @param {map} $grid
///
@mixin _frame-display-blockgrid($grid)
{
    &.grid-row,
    .grid-row
    {
        @extend %frame-blockgrid-row;
    }

    [data-col]
    {
        @extend %frame-blockgrid-column;
    }

    // add the default column widths
    $defaultColumnWidths: map-get($grid, 'default');
    @each $name, $width in $defaultColumnWidths
    {
        [data-col*="#{$name}"]
        {
            width: $width;
        }
    }

    // the columns widths per breakpoint
    @each $breakpoint in $_frame-breakpoints
    {
        @if map-has-key($grid, $breakpoint)
        {
            @include add-breakpoint($breakpoint, 'max')
            {
                $columnWidths: map-get($grid, $breakpoint);
                @each $width, $names in $columnWidths
                {
                    $selectors: ();
                    @each $name in $names
                    {
                        // when the column width for this breakpoint is
                        // different from the default column width, add the
                        // default column (without breakpoint prefix) selector
                        // to the list of selectors for the new width.
                        // by doing this, the grid will automatically respond
                        // to the breakpoint, thus making the grid responsive
                        @if ($width != map-get($defaultColumnWidths, $name))
                        {
                            $defaultColumnWidths: map-merge($defaultColumnWidths, ($name: $width));
                            $selectors: _frame-grid-selector($selectors, $name);
                        }

                        $selectors: _frame-grid-selector($selectors, $name, $breakpoint);
                    }

                    #{$selectors}
                    {
                        width: $width;
                    }
                }
            }
        }
    }
}
