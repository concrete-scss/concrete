////
/// frame-scss | source/components/_breakpoints.scss
/// file version: 1.02.000
///
/// Breakpoint and media query related functions and mixins.
////

///
/// @param {number|string|map|list} $breakpoint
///
/// @param {string} $type - Valid values are `min`, `max` or `both`.
///
/// @param {bool|number} $scrollbarBuffer [true]
///
/// @todo Combine breakpoints min-max values in media query when possible.
///
@mixin add-breakpoint($breakpoint, $type: 'both', $scrollbarBuffer: true)
{
    $mediaQuery:     ();
    $mediaQueryList: media-query-list($breakpoint);

    @each $item in $mediaQueryList
    {
        $mediaQuery: media-query-create($mediaQuery,
                                        $item,
                                        $type,
                                        $scrollbarBuffer);
    }

    @if is-list($mediaQuery, 1)
    {
        @media #{$mediaQuery}
        {
            @content;
        }
    }
}

//------------------------------------------------------------------------------

///
/// Combines the arguments into optimized media query ranges where possible
///
/// @param {list|string|map} $breakpoints
///
/// @return {list}
///
@function media-query-list($breakpoints)
{
    // when the argslist only has 1 item and that item is also a list, use the
    // first item as the argslist
    @if not is-list($breakpoints, 1)
    {
        $breakpoints: ($breakpoints);
    }

    $result: ();
    $sorted: ();

    @each $item in $breakpoints
    {
        @if is-string($item)
        {
            $item: frame-breakpoint($item);
        }
        @elseif is-number($item)
        {
            $item: ($item * 1px);
            $item:
            (
                'max': $item,
                'min': $item
            );
        }

        @if is-map($item) and map-has-key($item, 'min')
        {
            $min:    map-get($item, 'min');
            $sorted: map-append($sorted, $min, $item);
        }
    }

    @if (length($sorted) > 1)
    {
        $sorted: map-ksort($sorted, 'numeric', true);
        $sorted: map-values($sorted);


        $item:    nth-first($sorted);
        $highest: map-get($item, 'max');
        $lowest:  map-get($item, 'min');

        // loop through all sorted breakpoints from high -> low
        // combine breakpoints that are next to eachother (eg.
        // (min: 50, max: 99) and (min: 100, max: 200) becomes
        // (min: 50, max: 200))
        @for $i from 2 through length($sorted)
        {
            $item: nth($sorted, $i);

            $max: map-get($item, 'max');
            @if (($max + 1) >= $lowest)
            {
                $lowest: map-get($item, 'min');
            }
            @else
            {
                $result: append($result,
                (
                    'max': $highest,
                    'min': $lowest
                ));

                $lowest:  map-get($item, 'min');
                $highest: $max;
            }
        }

        // add the last lowest + highest values to the result
        $result: append($result,
        (
            'max': $highest,
            'min': $lowest
        ));
    }
    @else
    {
        $result: map-values($sorted);
    }

    @return $result;
}

///
/// @param {list} $mediaQuery - A list, representing the media query.
///
/// @param {map} $breakpoint - A breakpoint map with a min and/or max key.
///
/// @param {string} $type - Valid values are `min`, `max` or `both`.
///
/// @param {bool|number} $scrollbarBuffer
///
@function media-query-create($mediaQuery, $breakpoint, $type, $scrollbarBuffer)
{
    $max: false;
    $min: false;

    @if map-has-key($breakpoint, 'max') and ($type == 'both' or $type == 'max')
    {
        $max: map-get($breakpoint, 'max');
    }
    @if map-has-key($breakpoint, 'min') and ($type == 'both' or $type == 'min')
    {
        $min: map-get($breakpoint, 'min');
    }

    $hasMax: ($max != null and $max != false);
    $hasMin: ($min != null and $min != false);

    @if $hasMax or $hasMin
    {
        // apply a scrollbar buffer to the min/max values
        @if ($scrollbarBuffer == true)
        {
            $scrollbarBuffer: 0;
        }
        @elseif not is-number($scrollbarBuffer)
        {
            $scrollbarBuffer: set($scrollbarBuffer, 'number' 'px');
        }

        // create media query according to extracted min/max values
        $condition: screen;
        @if $hasMax
        {
            $max:       ($max + $scrollbarBuffer);
            //$max:       rem($max);
            $max:       unquote('and (max-width: #{$max})');
            $condition: append($condition, $max, 'space');
        }
        @if $hasMin
        {
            $min:       ($min + $scrollbarBuffer);
            //$min:       rem($min);
            $min:       unquote('and (min-width: #{$min})');
            $condition: append($condition, $min, 'space');
        }

        // then add the condition to allow multiple conditions
        $mediaQuery: append($mediaQuery, $condition, 'comma');
    }

    @return $mediaQuery;
}
