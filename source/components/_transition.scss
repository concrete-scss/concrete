////
/// frame-scss | components/_transition.scss
/// file version: 1.01.001
////

///
/// @param {list|string} $property
/// @param {string|number} $duration [default]
/// @param {bool|string} $easing [false]
/// @param {bool|number} $delay [false]
///
@mixin transition($property, $duration: 'default', $easing: false, $delay: false)
{
    // determin the default transition setting group
    $default: (is-string($duration) and $duration != 'default');
    $default: if($default, $duration, 'default');

    // retrieve default values where necessary
    @if ($duration == $default)
    {
        $duration: frame-transition($default, 'duration');
    }
    @if ($easing == false)
    {
        $easing: frame-transition($default, 'easing');
    }
    @if ($delay == false)
    {
        $delay: frame-transition($default, 'delay');
    }

    $hasPropertyList: is-list($property);
    $hasDurationList: is-list($duration);

    @if ($hasPropertyList and $hasDurationList)
    {
        $propertyListLength: length($property);
        $durationListLength: length($duration);

        @if ($propertyListLength == $durationListLength)
        {
            $transitions: ();
            @for $i from 1 through $propertyListLength
            {
                $p: nth($property, $i);
                $d: nth($duration, $i);

                $transition:  unquote($p) $d $easing $delay;
                $transitions: append($transitions, $transition, 'comma');
            }

            -webkit-transition: $transitions;
               -moz-transition: $transitions;
                 -o-transition: $transitions;
                    transition: $transitions;
        }
        @else
        {
            @include transition-property($property);
            @include transition-duration($duration);
            @include transition-timing-function($easing);
            @include transition-delay($delay);
        }
    }
    @else
    {
        @if $hasPropertyList
        {
            @include transition-property($property);
            $property: null;
        }
        @else
        {
            $property: unquote($property);
        }

        -webkit-transition: $property $duration $easing $delay;
           -moz-transition: $property $duration $easing $delay;
             -o-transition: $property $duration $easing $delay;
                transition: $property $duration $easing $delay;
    }
}

///
/// @param {string|number} $value [default]
///
@mixin transition-delay($value: 'default')
{
    @if ($value == 'default')
    {
        $value: frame-transition($value, 'delay');
    }

    -webkit-transition-delay: $value;
       -moz-transition-delay: $value;
         -o-transition-delay: $value;
            transition-delay: $value;
}

///
/// @param {string|number} $value [default]
///
@mixin transition-duration($value: 'default')
{
    @if ($value == 'default')
    {
        $value: frame-transition($value, 'duration');
    }

    -webkit-transition-duration: $value;
       -moz-transition-duration: $value;
         -o-transition-duration: $value;
            transition-duration: $value;
}

///
/// @param {list|string} $value
///
@mixin transition-property($value...)
{
    $value: unquote-all($value);

    -webkit-transition-property: $value;
       -moz-transition-property: $value;
         -o-transition-property: $value;
            transition-property: $value;
}

///
/// @param {string} $value
///
@mixin transition-timing-function($value: 'default')
{
    @if ($value == 'default')
    {
        $value: frame-transition($value, 'easing');
    }

    -webkit-transition-timing-function: $value;
       -moz-transition-timing-function: $value;
         -o-transition-timing-function: $value;
            transition-timing-function: $value;
}
