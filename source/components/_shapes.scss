////
/// concrete | source/components/_shapes.scss
////

///
/// *Created using example from http://jsfiddle.net/tzi/awt33/
///
/// @param {number} $size
///
@mixin shape-hexagon($size)
{
    position:       relative;
    display:        inline-block;
    vertical-align: middle;
    width:          $size;
    height:         $size * 0.57735;

    &:before,
    &:after
    {
        content:          '';
        position:         absolute;
        z-index:          -1;
        top:              0;
        bottom:           0;
        left:             0;
        right:            0;
        background-color: inherit;
    }

    &:before
    {
        transform: rotateZ(60deg);
    }

    &:after
    {
        transform: rotateZ(120deg);
    }
}

///
/// *Created using example from http://css-tricks.com/examples/ShapesOfCSS/
///
/// @param {string} $direction
///        The direction of the triangle point. Valid values are `up`/`u`,
///        `down`/`d`, `left`/`l`, `right`/`r`, `top-left`/`tl`,
///        `top-right`/`tr`, `bottom-left`/`bl` or `bottom-right`/`br`.
///
/// @param {color} $color - The color of the triangle.
///
/// @param {number} $size - The size of the triangle.
///
/// @param {number} $size2 [false]
///
@mixin shape-triangle($direction, $color, $size, $size2: false)
{
    @if is-string($color)
    {
        $color: color($color);
    }
    @elseif ($size2 == false)
    {
        $size2: $size;
    }

    width:  0;
    height: 0;

    @if ($direction == 'up' or $direction == 'u')
    {
        border-left:   $size solid transparent;
        border-right:  $size solid transparent;
        border-bottom: $size2 solid $color;
    }
    @elseif ($direction == 'down' or $direction == 'd')
    {
        border-top:    $size2 solid $color;
        border-left:   $size solid transparent;
        border-right:  $size solid transparent;
    }
    @elseif ($direction == 'left' or $direction == 'l')
    {
        border-top:    $size solid transparent;
        border-bottom: $size solid transparent;
        border-right:  $size2 solid $color;
    }
    @elseif ($direction == 'right' or $direction == 'r')
    {
        border-top:    $size solid transparent;
        border-bottom: $size solid transparent;
        border-left:   $size2 solid $color;
    }
    @elseif ($direction == 'top-left' or $direction == 'tl')
    {
        border-top:    $size2 solid $color;
        border-right:  $size solid transparent;
    }
    @elseif ($direction == 'top-right' or $direction == 'tr')
    {
        border-top:    $size2 solid $color;
        border-left:   $size solid transparent;
    }
    @elseif ($direction == 'bottom-left' or $direction == 'bl')
    {
        border-bottom: $size2 solid $color;
        border-right:  $size solid transparent;
    }
    @elseif ($direction == 'bottom-right' or $direction == 'br')
    {
        border-bottom: $size2 solid $color;
        border-left:   $size solid transparent;
    }
    @else
    {
        @return warn('shape-triangle',
            'Cannot create triangle, unknown direction `#{$direction}`.');
    }
}
