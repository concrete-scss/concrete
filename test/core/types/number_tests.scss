////
/// concrete | test/core/types/number_tests.scss
///
/// @group tests
////

@import '../../helpers/init';
@import '../../helpers/create-arglist';
@import '../../helpers/type-test';

@include set-test-file('core/types/_number');

// // // // // // // // // // // // // // // // // // // // // // // // // // //

@include type-test('is-number')
{
    @include type-test-assert-true(1, 1.23em, -1%, -1.23vh);

    @include type-test-assert-false('1rem',
                                    #fff,
                                    true,
                                    null,
                                    $TYPE_LIST,
                                    $TYPE_MAP);
}

@include type-test('is-em')
{
    @include type-test-assert-true(1em, 2343.345em, -3452345em);

    @include type-unit-test-assert-false(0,
                                         2rem,
                                         3%,
                                         4px,
                                         5pt,
                                         6in,
                                         7s);
}

@include type-test('is-rem')
{
    @include type-test-assert-true(1rem, 2343.345rem, -3452345rem);

    @include type-unit-test-assert-false(0,
                                         1em,
                                         3%,
                                         4px,
                                         5pt,
                                         6in,
                                         7s);
}

@include type-test('is-percentage')
{
    @include type-test-assert-true(1%, 2343.345%, -3452345%);

    @include type-unit-test-assert-false(0,
                                         1em,
                                         2rem,
                                         4px,
                                         5pt,
                                         6in,
                                         7s);
}

@include type-test('is-pixel')
{
    @include type-test-assert-true(1px, 2343.345px, -3452345px);

    @include type-unit-test-assert-false(0,
                                         1em,
                                         2rem,
                                         3%,
                                         5pt,
                                         6in,
                                         7s);
}

@include type-test('is-point')
{
    @include type-test-assert-true(1pt, 2343.345pt, -3452345pt);

    @include type-unit-test-assert-false(0,
                                         1em,
                                         2rem,
                                         3%,
                                         4px,
                                         6in,
                                         7s);
}

@include type-test('is-inch')
{
    @include type-test-assert-true(1in, 2343.345in, -3452345in);

    @include type-unit-test-assert-false(0,
                                         1em,
                                         2rem,
                                         3%,
                                         4px,
                                         5pt,
                                         7s);
}

@include type-test('is-second')
{
    @include type-test-assert-true(1s, 2343.345s, -3452345s);

    @include type-unit-test-assert-false(0,
                                         1em,
                                         2rem,
                                         3%,
                                         4px,
                                         5pt,
                                         6in);
}

// -----------------------------------------------------------------------------

@include test-function('set-unit')
{
    @include test('Should return the exact same value [1]')
    {
        @include assert-equal(set-unit(1px, 'px', 2%), 1px);
    }

    @include test('Should return the exact same value [2]')
    {
        @include assert-equal(set-unit(10vh, 'vh', 2%), 10vh);
    }

    @include test('Should return the default value [1]')
    {
        @include assert-equal(set-unit(10vh, 'vw', 20vw), 20vw);
    }

    @include test('Should return the default value [2]')
    {
        @include assert-equal(set-unit('test', '%'), 0);
    }

    @include test('Should return the default value [3]')
    {
        @include assert-equal(set-unit(true, 'px'), 0);
    }
}


@include test-function('equal-units')
{
    @include test('Should succeed when both numbers are of equal units')
    {
        @include assert-true(equal-units(1px, 2px));
    }

    @include test('Should fail when both numbers are not of equal units')
    {
        @include assert-false(equal-units(1px, 2%));
    }

    @include test('Should fail when a var is not a number')
    {
        @include assert-false(equal-units(1px, 'str'));
    }
}

// -----------------------------------------------------------------------------

@include test-function('em')
{
    @include test('Should return a em value [1]')
    {
        @include assert-equal(em(32px, 16px), 2em);
    }

    @include test('Should return a em value [2]')
    {
        @include set-em-base-value(14px);
        @include assert-equal(em(28px), 2em);
    }

    @include test('Should return a em value [3]')
    {
        @include assert-equal(em(10vh, 5vh), 2em);
    }

    @include test('Should return the same input value')
    {
        @include assert-equal(em(10vh, 10px), 10vh);
    }
}


@include test-function('rem')
{
    @include test('Should return a rem value [1]')
    {
        @include assert-equal(rem(16px), 1rem);
    }

    @include test('Should return a rem value [2]')
    {
        @include assert-equal(rem(10vh), 10vh);
    }
}
