////
/// concrete | test/core/types/map_tests.scss
///
/// @group tests
////

@import '../../helpers/init';
@import '../../helpers/create-arglist';
@import '../../helpers/type-test';

@include set-test-file('core/types/_map');

// // // // // // // // // // // // // // // // // // // // // // // // // // //

@include type-test('is-map')
{
    @include type-test-assert-true($TYPE_MAP, $TYPE_MAP);

    @include type-test-assert-false(1,
                                    '()',
                                    #000,
                                    false,
                                    null,
                                    $TYPE_LIST);
}

// -----------------------------------------------------------------------------

@include test-function('map-add')
{
    @include test('Should add the key and value to the map')
    {
        $actual:   map-add(('k1': 'v1', 'k2': 'v2'), 'k3', 'v3');
        $expected: ('k1': 'v1', 'k2': 'v2', 'k3': 'v3');

        @include assert-equal($actual, $expected);
    }

    @include test('Should return the original map')
    {
        $expected: ('k1': 'v1', 'k2': 'v2');
        $actual:   map-add($expected, 'k2', 'existing value');

        @include assert-equal($actual, $expected);
    }

    @include test('Should replace the key and value in the map')
    {
        $actual: map-add(('k1': 'v1'), 'k1', 'replaced value', true);

        @include assert-equal($actual, ('k1': 'replaced value'));
    }
}

@include test-function('map-replace')
{
    @include test('Should replace the value of the key in the map')
    {
        $map:      ('k1': 'v1', 'k2': 'v2');
        $actual:   map-replace($map, 'k2', 'replaced value');
        $expected: ('k1': 'v1', 'k2': 'replaced value');

        @include assert-equal($actual, $expected);
    }

    @include test('Should return the original map')
    {
        $expected: ('k1': 'v1', 'k2': 'v2');
        $actual:   map-replace($expected, 'k3', 'replaced value');

        @include assert-equal($actual, $expected);
    }

    @include test('Should add the extra key and value to the map')
    {
        $actual: map-replace(('k1': 'v1'), 'k2', 'added value', true);

        @include assert-equal($actual, ('k1': 'v1', 'k2': 'added value'));
    }
}

@include test-function('map-append')
{
    @include test('Should add the key and value to the map')
    {
        $actual:   map-append(('test': true), 'test2', true);
        $expected: ('test': true, 'test2': true);

        @include assert-equal($actual, $expected);
    }

    @include test('Should add the value to existing key in the map [1]')
    {
        $actual:   map-append(('test': 1), 'test', 2, 'comma');
        $expected: ('test': (1, 2));

        @include assert-equal($actual, $expected);
    }

    @include test('Should add the value to existing key in the map [2]')
    {
        $actual:   map-append(('test': 1), 'test', 2, 'space');
        $expected: ('test': (1 2));

        @include assert-equal($actual, $expected);
    }
}


@include test-function('map-get-key')
{
    @include test('Should return the first found key from the map [1]')
    {
        $input: ('a': 1, 'b': 2, 'c': 3);
        @include assert-equal(map-get-key($input, 2), 'b');
    }

    @include test('Should return the first found key from the map [2]')
    {
        $input: ('a': 2, 'b': 2, 'c': 3);
        @include assert-equal(map-get-key($input, 2), 'a');
    }

    @include test('Should return the first found key from the map [3]')
    {
        $input: (1: 'a', 2: 'b', 'a': 1, 'b': 2);
        @include assert-equal(map-get-key($input, 2), 'b');
    }

    @include test('Should return null when the key is not found')
    {
        $input: ('a': 1, 'b': 2, 'c': 3);
        @include assert-equal(map-get-key($input, 4), null);
    }
}


@include test-function('map-ksort')
{
    @include test('Should sort the map in numeric order')
    {
        $input:    (3: 'a', 4: 'b', 1: 'c', 2: 'd');
        $actual:   map-ksort($input, 'numeric');
        $expected: (1: 'c', 2: 'd', 3: 'a', 4: 'b');

        @include assert-equal($actual, $expected);
    }

    @include test('Should sort the map in reverse numeric order')
    {
        $input:    (3: 'a', 4: 'b', 1: 'c', 2: 'd');
        $actual:   map-ksort($input, 'numeric', true);
        $expected: (4: 'b', 3: 'a', 2: 'd', 1: 'c');

        @include assert-equal($actual, $expected);
    }
}
