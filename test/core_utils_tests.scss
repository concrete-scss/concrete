////
/// concrete | test/core_utils_tests.scss
///
/// @group tests
////

$concrete-font-styles:
(
    'default':
    (
        'font-size': 14px,
    )
);

//------------------------------------------------------------------------------

@import 'true';
@import '../source/core';

////////////////////////////////////////////////////////////////////////////////

@include test-module('core/_utils: equal-types [function]')
{
    @include test('Should succeed when both vars are of equal types [1]')
    {
        @include assert-equal(equal-types('test1', 'test2'), true);
    }

    @include test('Should succeed when both vars are of equal types [2]')
    {
        @include assert-equal(equal-types(false, true), true);
    }

    @include test('Should succeed when both vars are of equal types [3]')
    {
        @include assert-equal(equal-types(1%, 3vh), true);
    }

    @include test('Should fail when both vars are not of equal types [1]')
    {
        @include assert-equal(not equal-types('test1', true), true);
    }

    @include test('Should fail when both vars are not of equal types [2]')
    {
        @include assert-equal(equal-types(1, true), false);
    }

    @include test('Should fail when both vars are not of equal types [3]')
    {
        @include assert-equal(equal-types((), null), false);
    }
}


@include test-module('core/_utils: equal-units [function]')
{
    @include test('Should succeed when both numbers are of equal units')
    {
        @include assert-equal(equal-units(1px, 2px), true);
    }

    @include test('Should fail when both numbers are not of equal units')
    {
        @include assert-equal(equal-units(1px, 2%), false);
    }

    @include test('Should fail when a var is not a number')
    {
        @include assert-equal(equal-units(1px, 'str'), false);
    }
}


@include test-module('core/_utils: set-type [function]')
{
    @include test('Should return the exact same value [1]')
    {
        @include assert-equal(set-type(1234, 'number', 'test'), 1234);
    }

    @include test('Should return the exact same value [2]')
    {
        @include assert-equal(set-type(true, 'bool', false), true);
    }

    @include test('Should return the exact same value [3]')
    {
        @include assert-equal(set-type(false, 'boolean', 2%), false);
    }

    @include test('Should return the default value [1]')
    {
        @include assert-equal(set-type(12, 'boolean', true), true);
    }

    @include test('Should return the default value [2]')
    {
        @include assert-equal(set-type('test', 'number'), 0);
    }

    @include test('Should return the default value [3]')
    {
        @include assert-equal(set-type('test', 'list'), ());
    }
}


@include test-module('core/_utils: set-unit [function]')
{
    @include test('Should return the exact same value [1]')
    {
        @include assert-equal(set-unit(1px, 'px', 2%), 1px);
    }

    @include test('Should return the exact same value [2]')
    {
        @include assert-equal(set-unit(10vh, 'vh', 2%), 10vh);
    }

    @include test('Should return the default value [1]')
    {
        @include assert-equal(set-unit(10vh, 'vw', 20vw), 20vw);
    }

    @include test('Should return the default value [2]')
    {
        @include assert-equal(set-unit('test', '%'), 0);
    }

    @include test('Should return the default value [3]')
    {
        @include assert-equal(set-unit(true, 'px'), 0);
    }
}


@include test-module('core/_utils: unquote-all [function]')
{
    @include test('Should unquote all list items [1]')
    {
        $input:    ('"string"' 1 2 3 true);
        $expected: (string 1 2 3 true);

        @include assert-equal(unquote-all($input), $expected);
    }

    @include test('Should unquote all list items [2]')
    {
        $input:    ('"string1"' '"string2"' '"string3"');
        $expected: ('string1' 'string2' 'string3');

        @include assert-equal(unquote-all($input), $expected);
    }

    @include test('Should unquote the string')
    {
        @include assert-equal(unquote-all('"string"'), 'string');
    }

    @include test('Should return the same input value [1]')
    {
        $input:    ('string1' 'string2' 'string3');
        $expected: ('string1' 'string2' 'string3');

        @include assert-equal(unquote-all($input), $expected);
    }

    @include test('Should return the same input value [2]')
    {
        $input:    ('string1' 'string2' 'string3');
        $expected: ('string1' 'string2' 'string3');

        @include assert-equal(unquote-all('string'), 'string');
    }
}


@include test-module('core/_utils: em [function]')
{
    @include test('Should return a em value [1]')
    {
        @include assert-equal(em(32px, 16px), 2em);
    }

    @include test('Should return a em value [2]')
    {
        @include assert-equal(em(28px), 2em);
    }

    @include test('Should return a em value [3]')
    {
        @include assert-equal(em(10vh, 5vh), 2em);
    }

    @include test('Should return the same input value')
    {
        @include assert-equal(em(10vh, 10px), 10vh);
    }
}


@include test-module('core/_utils: rem [function]')
{
    @include test('Should return a rem value')
    {
        @include assert-equal(rem(14px), 1rem);
    }

    @include test('Should return a rem value')
    {
        @include assert-equal(rem(10vh), 10vh);
    }
}
